{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.baseUrl = `${environment.URL_API}`;\n      this.showMenuEmitter = new EventEmitter();\n    }\n\n    doLogin(username, password) {\n      const headers = new HttpHeaders({\n        Authorization: 'basic' + btoa(username + \":\" + password)\n      });\n      return this.http.get(`${this.baseUrl}/v1/auth/users`, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getUsers() {\n      let username = \"dosocon\";\n      let password = \"senha\";\n      const headers = new HttpHeaders({\n        Authorization: 'basic' + btoa(username + \":\" + password)\n      });\n      this.http.get(`${this.baseUrl}/v1/auth/users`, {\n        headers\n      });\n    } // doLogin(user: User) {\n    //   this.http.post<Observable<boolean>>(this.baseUrl, user).subscribe(isValid => {\n    //     if (isValid) {\n    //       sessionStorage.setItem(\n    //         'token',\n    //         btoa(user.username + ':' + user.password),\n    //       );\n    //       this.authenticated = true;\n    //       this.showMenuEmitter.emit(true);\n    //       this.router.navigate(['/']);\n    //     } else {\n    //       this.authenticated = false;\n    //       this.showMenuEmitter.emit(false);\n    //     }\n    //   });\n    // }\n    // doLogin(user: User) {\n    //   if (user.username === 'maiconcardoso' && user.password === '123') {\n    //     this.authenticated = true;\n    //     this.showMenuEmitter.emit(true);\n    //     this.router.navigate(['/']);\n    //   } else {\n    //     this.authenticated = false;\n    //     this.showMenuEmitter.emit(false);\n    //   }\n    // }\n\n\n    userIsAuthenticated() {\n      return this.authenticated;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}