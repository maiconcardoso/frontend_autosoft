{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport let OrderService = /*#__PURE__*/(() => {\n  class OrderService {\n    constructor(http, toast, router) {\n      this.http = http;\n      this.toast = toast;\n      this.router = router;\n      this.baseUrl = `${environment.URL_API}/v1/orders`;\n    }\n\n    create(order) {\n      return this.http.post(this.baseUrl, order).pipe(map(response => response), catchError(error => this.showError(error)));\n    }\n\n    readAll() {\n      return this.http.get(this.baseUrl).pipe(map(response => response), catchError(error => this.showError(error)));\n    }\n\n    readById(id) {\n      const url = `${this.baseUrl}/${id}`;\n      return this.http.get(url).pipe(map(response => response), catchError(error => this.showError(error)));\n    }\n\n    readByNameCustomer(nameCustomer) {\n      const url = `${this.baseUrl}/find?name=${nameCustomer}`;\n      return this.http.get(url).pipe(map(response => response), catchError(error => this.showError(error)));\n    }\n\n    update(order) {\n      const url = `${this.baseUrl}/${order.id}`;\n      return this.http.put(url, order).pipe(map(response => response), catchError(error => this.showError(error)));\n    }\n\n    delete(order) {\n      const url = `${this.baseUrl}/${order.id}`;\n      return this.http.delete(url).pipe(map(response => response), catchError(error => this.showError(error)));\n    }\n\n    showMessage(title, msg, type) {\n      this.toast.show(msg, title, {\n        closeButton: true,\n        progressBar: true\n      }, type);\n    }\n\n    showError(e) {\n      this.showMessage('Erro!', 'Não foi possível realizar a operação', 'toast-error');\n      this.router.navigate(['notfound']);\n      return EMPTY;\n    }\n\n  }\n\n  OrderService.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n  };\n\n  OrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrderService;\n})();","map":null,"metadata":{},"sourceType":"module"}